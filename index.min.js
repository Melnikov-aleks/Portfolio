!function a(i,s,c){function u(e,t){if(!s[e]){if(!i[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(l)return l(e,!0);var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}var o=s[e]={exports:{}};i[e][0].call(o.exports,function(t){return u(i[e][1][t]||t)},o,o.exports,a,i,s,c)}return s[e].exports}for(var l="function"==typeof require&&require,t=0;t<c.length;t++)u(c[t]);return u}({1:[function(t,e,r){e.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}},{}],2:[function(t,e,r){var n=t("./arrayLikeToArray");e.exports=function(t){if(Array.isArray(t))return n(t)}},{"./arrayLikeToArray":1}],3:[function(t,e,r){function c(t,e,r,n,o,a,i){try{var s=t[a](i),c=s.value}catch(t){return void r(t)}s.done?e(c):Promise.resolve(c).then(n,o)}e.exports=function(s){return function(){var t=this,i=arguments;return new Promise(function(e,r){var n=s.apply(t,i);function o(t){c(n,e,r,o,a,"next",t)}function a(t){c(n,e,r,o,a,"throw",t)}o(void 0)})}}},{}],4:[function(t,e,r){e.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},{}],5:[function(t,e,r){function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}e.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},{}],6:[function(t,e,r){e.exports=function(t){return t&&t.__esModule?t:{default:t}}},{}],7:[function(t,e,r){e.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},{}],8:[function(t,e,r){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},{}],9:[function(t,e,r){var n=t("./arrayWithoutHoles"),o=t("./iterableToArray"),a=t("./unsupportedIterableToArray"),i=t("./nonIterableSpread");e.exports=function(t){return n(t)||o(t)||a(t)||i()}},{"./arrayWithoutHoles":2,"./iterableToArray":7,"./nonIterableSpread":8,"./unsupportedIterableToArray":10}],10:[function(t,e,r){var n=t("./arrayLikeToArray");e.exports=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}},{"./arrayLikeToArray":1}],11:[function(t,e,r){var n=function(i){"use strict";var c,t=Object.prototype,l=t.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},o=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",n=e.toStringTag||"@@toStringTag";function a(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{a({},"")}catch(t){a=function(t,e,r){return t[e]=r}}function s(t,e,r,n){var a,i,s,c,o=e&&e.prototype instanceof g?e:g,u=Object.create(o.prototype),l=new A(n||[]);return u._invoke=(a=t,i=r,s=l,c=p,function(t,e){if(c===d)throw new Error("Generator is already running");if(c===v){if("throw"===t)throw e;return T()}for(s.method=t,s.arg=e;;){var r=s.delegate;if(r){var n=k(r,s);if(n){if(n===y)continue;return n}}if("next"===s.method)s.sent=s._sent=s.arg;else if("throw"===s.method){if(c===p)throw c=v,s.arg;s.dispatchException(s.arg)}else"return"===s.method&&s.abrupt("return",s.arg);c=d;var o=f(a,i,s);if("normal"===o.type){if(c=s.done?v:h,o.arg===y)continue;return{value:o.arg,done:s.done}}"throw"===o.type&&(c=v,s.method="throw",s.arg=o.arg)}}),u}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}i.wrap=s;var p="suspendedStart",h="suspendedYield",d="executing",v="completed",y={};function g(){}function u(){}function m(){}var b={};b[o]=function(){return this};var _=Object.getPrototypeOf,w=_&&_(_(O([])));w&&w!==t&&l.call(w,o)&&(b=w);var L=m.prototype=g.prototype=Object.create(b);function j(t){["next","throw","return"].forEach(function(e){a(t,e,function(t){return this._invoke(e,t)})})}function x(c,u){var e;this._invoke=function(r,n){function t(){return new u(function(t,e){!function e(t,r,n,o){var a=f(c[t],c,r);if("throw"!==a.type){var i=a.arg,s=i.value;return s&&"object"==typeof s&&l.call(s,"__await")?u.resolve(s.__await).then(function(t){e("next",t,n,o)},function(t){e("throw",t,n,o)}):u.resolve(s).then(function(t){i.value=t,n(i)},function(t){return e("throw",t,n,o)})}o(a.arg)}(r,n,t,e)})}return e=e?e.then(t,t):t()}}function k(t,e){var r=t.iterator[e.method];if(r===c){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=c,k(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var n=f(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,y;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=c),e.delegate=null,y):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function O(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function t(){for(;++r<e.length;)if(l.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=c,t.done=!0,t};return n.next=n}}return{next:T}}function T(){return{value:c,done:!0}}return u.prototype=L.constructor=m,(m.constructor=u).displayName=a(m,n,"GeneratorFunction"),i.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===u||"GeneratorFunction"===(e.displayName||e.name))},i.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a(t,n,"GeneratorFunction")),t.prototype=Object.create(L),t},i.awrap=function(t){return{__await:t}},j(x.prototype),x.prototype[r]=function(){return this},i.AsyncIterator=x,i.async=function(t,e,r,n,o){void 0===o&&(o=Promise);var a=new x(s(t,e,r,n),o);return i.isGeneratorFunction(e)?a:a.next().then(function(t){return t.done?t.value:a.next()})},j(L),a(L,n,"Generator"),L[o]=function(){return this},L.toString=function(){return"[object Generator]"},i.keys=function(r){var n=[];for(var t in r)n.push(t);return n.reverse(),function t(){for(;n.length;){var e=n.pop();if(e in r)return t.value=e,t.done=!1,t}return t.done=!0,t}},i.values=O,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=c)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function t(t,e){return a.type="throw",a.arg=r,n.next=t,e&&(n.method="next",n.arg=c),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],a=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var i=l.call(o,"catchLoc"),s=l.call(o,"finallyLoc");if(i&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(i){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:O(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=c),y}},i}("object"==typeof e?e.exports:{});try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},{}],12:[function(t,e,r){e.exports=t("regenerator-runtime")},{"regenerator-runtime":11}],13:[function(t,e,r){"use strict";var n=t("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.Projects=void 0;var o=n(t("@babel/runtime/regenerator")),a=n(t("@babel/runtime/helpers/asyncToGenerator")),i=n(t("@babel/runtime/helpers/classCallCheck")),s=n(t("@babel/runtime/helpers/createClass")),c=t("./utils.js"),u=t("./templates.js"),l=function(){function e(t){(0,i.default)(this,e),this.wrapper=document.querySelector(t)}var t,r;return(0,s.default)(e,[{key:"init",value:(r=(0,a.default)(o.default.mark(function t(){return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,(0,c.getData)("https://raw.githubusercontent.com/Melnikov-aleks/Portfolio/master/projects.json");case 3:this.data=t.sent,this.status="init",t.next=11;break;case 7:t.prev=7,t.t0=t.catch(0),console.error(t.t0),this.status=t.t0.message;case 11:case"end":return t.stop()}},t,this,[[0,7]])})),function(){return r.apply(this,arguments)})},{key:"render",value:function(t){this.wrapper.innerHTML="";var e=[];t.forEach(function(t){e.push((0,u.getProjectHTML)(t))}),this.wrapper.innerHTML=e.join("")}},{key:"filter",value:(t=(0,a.default)(o.default.mark(function t(){var e,r=arguments;return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e=0<r.length&&void 0!==r[0]?r[0]:"all","init"!==this.status)return t.next=4,this.init();t.next=4;break;case 4:t.t0=!0,t.next=t.t0===("ALL"===e.toUpperCase()&&"init"===this.status)?7:t.t0===("NEW"===e.toUpperCase()&&"init"===this.status)?9:t.t0===("init"!==this.status)?11:13;break;case 7:return this.render(this.data),t.abrupt("break",15);case 9:return this.render(this.data.slice().sort(function(t,e){return new Date(e.time)-new Date(t.time)}).filter(function(t,e){return e<6})),t.abrupt("break",15);case 11:return this.wrapper.innerHTML='<p class="error">Ошибка <span class="error__status">'.concat(this.status,"</span>, попробуйте позже!</p>"),t.abrupt("break",15);case 13:return this.render(this.data.filter(function(t){return t.tags.some(function(t){return t.toUpperCase()==e.toUpperCase()})})),t.abrupt("break",15);case 15:case"end":return t.stop()}},t,this)})),function(){return t.apply(this,arguments)})}]),e}();r.Projects=l},{"./templates.js":17,"./utils.js":18,"@babel/runtime/helpers/asyncToGenerator":3,"@babel/runtime/helpers/classCallCheck":4,"@babel/runtime/helpers/createClass":5,"@babel/runtime/helpers/interopRequireDefault":6,"@babel/runtime/regenerator":12}],14:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.previewsPath=r.phoneRe=r.emailRe=r.formFeedback=r.burger=r.filterList=r.navList=r.navigation=r.projects=void 0;var n=new(t("./classes.js").Projects)(".projects-list");r.projects=n;var o=document.querySelector(".navigation");r.navigation=o;var a=document.querySelector(".navigation__list");r.navList=a;var i=document.querySelector(".filter-list");r.filterList=i;var s=document.querySelector(".burger");r.burger=s;var c=document.querySelector(".contacts__form");r.formFeedback=c;r.emailRe=/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;r.phoneRe=/^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;r.previewsPath="https://github.com/Melnikov-aleks/Portfolio/raw/master/previews/"},{"./classes.js":13}],15:[function(t,e,r){"use strict";var n=t("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.handlerSubmit=function(r){r.preventDefault(),r.target.classList.add("disabled");var t=new FormData(r.target);r.target.querySelectorAll(".form__status").forEach(function(t){return t.remove()});var e,n=function(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return u(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return i=t.done,t},e:function(t){s=!0,a=t},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw a}}}}(t.keys());try{for(n.s();!(e=n.n()).done;){var o=e.value;r.target[o].classList.remove("form__input-error")}}catch(t){n.e(t)}finally{n.f()}(function(t,e){var r=0;e.get("name")||(t.name.classList.add("form__input-error"),i(t,"name is required"),r++);e.get("_replyto")||e.get("phone")?(e.get("_replyto")&&!c.emailRe.test(e.get("_replyto").toLowerCase())&&(t._replyto.classList.add("form__input-error"),i(t,"Incorrect email"),r++),e.get("phone")&&!c.phoneRe.test(e.get("phone").toLowerCase())&&(t.phone.classList.add("form__input-error"),i(t,"Incorrect phone"),r++)):(t.phone.classList.add("form__input-error"),t._replyto.classList.add("form__input-error"),i(t,"email or phone is required"),r++);return!r})(r.target,t)&&(0,a.sendData)(r.target.action,t).then(function(t){var e;(e=r.target).reset(),e.insertAdjacentHTML("beforeend",'<p class="form__status form__success">Success!</p>')}).catch(function(t){i(r.target,"Oops. Error sending form!")});r.target.classList.remove("disabled")},r.handlerBurger=function(t){t.target.closest(".burger").classList.toggle("burger--active"),c.navigation.classList.toggle("navigation--active")},r.handlerFilter=function(t){if(t.preventDefault(),!t.target.closest(".filter"))return;(0,o.default)(c.filterList.children).forEach(function(t){return t.classList.remove("filter--active")}),t.target.closest(".filter").classList.add("filter--active"),c.projects.filter(t.target.closest(".filter").getAttribute("data-filter"))},r.handleMarker=function(t){if(!t.target.closest("li")||!t.target.closest("li").offsetParent.querySelector(".marker"))return;var e=t.target.closest("li").offsetHeight,r=t.target.closest("li").offsetWidth,n=t.target.closest("li").offsetParent.offsetHeight-t.target.closest("li").offsetTop-e,o=t.target.closest("li").offsetLeft,a=t.target.closest("li").offsetParent.querySelector(".marker");a.style.bottom=n+"px",a.style.left=o+"px",a.style.width=r+"px",a.style.height=e+"px"},r.handleScroll=function(){(function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;document.querySelector(t).getBoundingClientRect().top<=e+1?document.querySelector("#header").classList.add("header--sticky"):document.querySelector("#header").classList.remove("header--sticky")})("#about",30),o=document.querySelector("#header").getBoundingClientRect().height,e=c.navigation.querySelectorAll(".navigation__link"),a=0,e.forEach(function(t){var e=document.querySelector(t.getAttribute("href")).getBoundingClientRect(),r=e.top,n=e.bottom;r<=o&&o<n?(t.classList.add("navigation__link--active"),a++):t.classList.remove("navigation__link--active")}),1<a&&(r=c.navigation,i=n=0,(s=r.querySelectorAll(".navigation__link--active")).forEach(function(t,e){t.classList.remove("navigation__link--active");var r=document.querySelector(t.getAttribute("href")).getBoundingClientRect().top;0===e?n=r:n<=r&&(n=r,i=e)}),s[i].classList.add("navigation__link--active")),t=document.querySelector("#about"),document.documentElement.clientHeight>=1.2*t.getBoundingClientRect().top&&t.classList.add("show");var t;var o,e,a,r,n,i,s},r.scrollToAnchor=function(t){if(t.preventDefault(),!t.target.closest(".navigation__link"))return;var e=document.querySelector(t.target.getAttribute("href")).getBoundingClientRect().top,r=e+pageYOffset;e>=document.querySelector("#intro").nextElementSibling.getBoundingClientRect().top&&(r-=30);document.querySelector(".burger").classList.remove("burger--active"),c.navigation.classList.remove("navigation--active"),window.scrollTo({top:r,behavior:"smooth"})};var o=n(t("@babel/runtime/helpers/toConsumableArray")),c=t("./constants.js"),a=t("./utils.js");function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){t.insertAdjacentHTML("beforeend",'<p class="form__status form__error">'.concat(e,"</p>"))}},{"./constants.js":14,"./utils.js":18,"@babel/runtime/helpers/interopRequireDefault":6,"@babel/runtime/helpers/toConsumableArray":9}],16:[function(t,e,r){"use strict";var n=t("./constants.js"),o=t("./handlers.js");window.addEventListener("scroll",o.handleScroll),n.burger.addEventListener("click",o.handlerBurger),n.navigation.addEventListener("click",o.scrollToAnchor),n.navList.addEventListener("mouseover",o.handleMarker),n.filterList.addEventListener("click",o.handlerFilter),n.filterList.addEventListener("mouseover",o.handleMarker),n.formFeedback.addEventListener("submit",o.handlerSubmit),n.projects.filter()},{"./constants.js":14,"./handlers.js":15}],17:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.getProjectHTML=function(t){return'\n\t<li class="projects-list__item project" data-tag="'.concat(t.tags.join(" "),'" data-time="').concat(t.time,'">\n\t<h3 class="project__title">').concat(t.name,"</h3>\n\t\t").concat(function(t,e){var r=[];for(var n in t)t.hasOwnProperty(n)&&r.push('\n\t\t\t<div class="project__preview-'.concat(n,'">\n\t\t\t\t<img class="project__img-').concat(n,'" src="').concat(o.previewsPath).concat(t[n],'" alt="').concat(e,'">\n\t\t\t</div>'));return r.length?'<figure class="project__previews">'.concat(r.join(""),"</figure>"):""}(t.previews,t.name),'\n\t\t<p class="project__description">').concat(t.description,"</p>\n\t\t").concat(function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push('<li class="project__tag">'.concat(t[r],"</li>"));return e.length?'<ul class="project__tags-list">'.concat(e.join(""),"</ul>"):""}(t.keywords),"\n\t\t").concat(function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push('<a class="project__btn btn-'.concat(r,' btn" href="').concat(t[r],'" target="_blank" rel="noopener noreferrer">\n\t\t\t\t\t<span class="btn__border"></span>\n\t\t\t\t\t<span class="btn__border"></span>\n\t\t\t\t\t<span class="btn__border"></span>\n\t\t\t\t\t<span class="btn__border"></span>\n\t\t\t\t\t').concat(r,"\n\t\t\t\t</a>"));return e.length?'<div class="project__buttons">'.concat(e.join(""),"</div>"):""}(t.links),"\n\t</li>")};var o=t("./constants.js")},{"./constants.js":14}],18:[function(t,e,r){"use strict";var n=t("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.sendData=function(t,e){return i.apply(this,arguments)},r.getData=function(t){return s.apply(this,arguments)};var o=n(t("@babel/runtime/regenerator")),a=n(t("@babel/runtime/helpers/asyncToGenerator"));function i(){return(i=(0,a.default)(o.default.mark(function t(e,r){var n;return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(Object.fromEntries(r))});case 3:if((n=t.sent).ok){t.next=6;break}throw new Error(n.status);case 6:return t.abrupt("return",n);case 9:throw t.prev=9,t.t0=t.catch(0),t.t0;case 12:case"end":return t.stop()}},t,null,[[0,9]])}))).apply(this,arguments)}function s(){return(s=(0,a.default)(o.default.mark(function t(e){var r,n;return o.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(e);case 3:if((r=t.sent).ok){t.next=6;break}throw new Error(r.status);case 6:return t.next=8,r.json();case 8:return n=t.sent,t.abrupt("return",n);case 12:throw t.prev=12,t.t0=t.catch(0),t.t0;case 15:case"end":return t.stop()}},t,null,[[0,12]])}))).apply(this,arguments)}},{"@babel/runtime/helpers/asyncToGenerator":3,"@babel/runtime/helpers/interopRequireDefault":6,"@babel/runtime/regenerator":12}]},{},[16]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
